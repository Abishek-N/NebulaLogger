//------------------------------------------------------------------------------------------------//
// This file is part of the Nebula Logger project, released under the MIT License.                //
// See LICENSE file or go to https://github.com/jongpie/NebulaLogger for full license details.    //
//------------------------------------------------------------------------------------------------//

/**
 * @group Logger Engine
 * @description Class used to manage any data-related operations, including database DML statements,
 *              publishing platform events via the event bus, and enqueueing queueable jobs
 */
@SuppressWarnings('PMD.ExcessivePublicCount')
public without sharing class LoggerDataStore {
    private static final LoggerEmailSender EMAIL_SENDER = new LoggerEmailSender();
    @TestVisible
    private static final List<ApexEmailNotification> MOCK_NOTIFICATIONS = new List<ApexEmailNotification>();

    @TestVisible
    private static final List<ApexEmailNotification> CACHED_APEX_ERROR_RECIPIENTS {
        get {
            if (CACHED_APEX_ERROR_RECIPIENTS == null) {
                CACHED_APEX_ERROR_RECIPIENTS = queryApexErrrorRecipients();
            }
            return CACHED_APEX_ERROR_RECIPIENTS;
        }
        set;
    }

    private static Database databaseInstance {
        get {
            if (databaseInstance == null) {
                databaseInstance = new Database();
            }
            return databaseInstance;
        }
        set;
    }

    private static EventBus eventBusInstance {
        get {
            if (eventBusInstance == null) {
                eventBusInstance = new EventBus();
            }
            return eventBusInstance;
        }
        set;
    }

    private static JobQueue jobQueueInstance {
        get {
            if (jobQueueInstance == null) {
                jobQueueInstance = new JobQueue();
            }
            return jobQueueInstance;
        }
        set;
    }

    /**
     * @description The instance `LoggerDataStore.Database` used for any DML
     *              operations in the current transaction.
     * @return   The singleton instance of `LoggerDataStore.Database`
     */
    public static Database getDatabase() {
        return databaseInstance;
    }

    /**
     * @description The instance `LoggerDataStore.EventBus` used for publishing
     *              platform events in the current transaction.
     * @return   The singleton instance of `LoggerDataStore.EventBus`
     */
    public static EventBus getEventBus() {
        return eventBusInstance;
    }

    /**
     * @description The instance `LoggerDataStore.JobQueue` used for enqueuing
     *              any queueable jobs in the current transaction.
     * @return   The singleton instance of `LoggerDataStore.JobQueue`
     */
    public static JobQueue getJobQueue() {
        return jobQueueInstance;
    }

    @TestVisible
    private static void setMock(Database mockDatabase) {
        databaseInstance = mockDatabase;
    }

    @TestVisible
    private static void setMock(EventBus mockEventBus) {
        eventBusInstance = mockEventBus;
    }

    @TestVisible
    private static void setMock(JobQueue mockJobQueue) {
        jobQueueInstance = mockJobQueue;
    }

    /**
     * @description Class used to centralize the handling of any DML operations
     */
    public virtual class Database {
        @SuppressWarnings('PMD.EmptyStatementBlock')
        protected Database() {
        }

        /**
         * @description Executes a `delete` DML operation for the `SObject` record
         * @param  record   The `SObject` record to delete
         * @return          The instance of `Database.DeleteResult`, generated by the platform when deleting the record
         */
        public virtual Database.DeleteResult deleteRecord(SObject record) {
            return System.Database.delete(record);
        }

        /**
         * @description Executes a `delete` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to delete
         * @return           The instance of `List<Database.DeleteResult>`, generated by the platform when deleting the records
         */
        public virtual List<Database.DeleteResult> deleteRecords(List<SObject> records) {
            return System.Database.delete(records);
        }

        /**
         * @description Executes a `delete` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to delete
         * @param  allOrNone Controls if all records must be deleted (`true`), or if partial deletion should be used (`false`)
         * @return           The instance of `List<Database.DeleteResult>`, generated by the platform when deleting the records
         */
        public virtual List<Database.DeleteResult> deleteRecords(List<SObject> records, Boolean allOrNone) {
            return System.Database.delete(records, allOrNone);
        }

        /**
         * @description Executes a `delete` DML operation for the `SObject` record, followed by hard deleting the
         *              record using `Database.emptyRecycleBin(record)`
         * @param  record   The `SObject` record to delete
         * @return          The instance of `Database.DeleteResult`, generated by the platform when deleting the record
         */
        public virtual Database.DeleteResult hardDeleteRecord(SObject record) {
            return this.hardDeleteRecords(new List<SObject>{ record }).get(0);
        }

        /**
         * @description Executes a `delete` DML operation on the provided list of `SObject` records, followed by hard deleting the
         *              records using `Database.emptyRecycleBin(records)`
         * @param  records   The list of `SObject` records to delete
         * @return           The instance of `List<Database.DeleteResult>`, generated by the platform when deleting the records
         */
        public virtual List<Database.DeleteResult> hardDeleteRecords(List<SObject> records) {
            List<Database.DeleteResult> results = this.deleteRecords(records);
            if (records.isEmpty() == false) {
                System.Database.emptyRecycleBin(records);
            }
            return results;
        }

        /**
         * @description Executes an `insert` DML operation on the provided `SObject` record
         * @param  record    The  `SObject` record to insert
         * @return           The instance of `Database.SaveResult`, generated by the platform when creating the record
         */
        public virtual Database.SaveResult insertRecord(SObject record) {
            Database.SaveResult result = System.Database.insert(record);
            new DataStoreErrorEmailSender().sendErrorEmail(record.getSObjectType(), new List<Database.SaveResult>{ result });
            return result;
        }

        /**
         * @description Executes an `insert` DML operation on the provided list of `SObject` records
         * @param  records    The list of `SObject` records to insert
         * @return            The instance of `List<Database.SaveResult>`, generated by the platform when creating the records
         */
        public virtual List<Database.SaveResult> insertRecords(List<SObject> records) {
            List<Database.SaveResult> results = System.Database.insert(records);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `insert` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to insert
         * @param  allOrNone Controls if all records must be created (`true`), or if partial creation should be used (`false`)
         * @return           The instance of `List<Database.SaveResult>`, generated by the platform when creating the records
         */
        public virtual List<Database.SaveResult> insertRecords(List<SObject> records, Boolean allOrNone) {
            List<Database.SaveResult> results = System.Database.insert(records, allOrNone);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `insert` DML operation on the provided list of `SObject` records
         * @param  records    The list of `SObject` records to insert
         * @param  dmlOptions Controls additional DML options, using the provided instance of `Database.DmlOptions`
         * @return            The instance of `List<Database.SaveResult>`, generated by the platform when creating the records
         */
        public virtual List<Database.SaveResult> insertRecords(List<SObject> records, Database.DmlOptions dmlOptions) {
            List<Database.SaveResult> results = System.Database.insert(records, dmlOptions);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `undelete` DML operation on the provided `SObject` record
         * @param  record    The  `SObject` record to undelete
         * @return           The instance of `Database.UndeleteResult`, generated by the platform when undeleting the record
         */
        public virtual Database.UndeleteResult undeleteRecord(SObject record) {
            return System.Database.undelete(record);
        }

        /**
         * @description Executes an `undelete` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to undelete
         * @return           The instance of `List<Database.UndeleteResult>`, generated by the platform when deleting the records
         */
        public virtual List<Database.UndeleteResult> undeleteRecords(List<SObject> records) {
            return System.Database.undelete(records);
        }

        /**
         * @description Executes an `undelete` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to undelete
         * @param  allOrNone Controls if all records must be undeleted (`true`), or if partial undeletion should be used (`false`)
         * @return           The instance of `List<Database.DeleteResult>`, generated by the platform when undeleting the records
         */
        public virtual List<Database.UndeleteResult> undeleteRecords(List<SObject> records, Boolean allOrNone) {
            return System.Database.undelete(records, allOrNone);
        }

        /**
         * @description Executes an `update` DML operation on the provided `SObject` record
         * @param  record    The  `SObject` record to update
         * @return           The instance of `Database.SaveResult`, generated by the platform when updating the record
         */
        public virtual Database.SaveResult updateRecord(SObject record) {
            Database.SaveResult result = System.Database.update(record);
            new DataStoreErrorEmailSender().sendErrorEmail(record.getSObjectType(), new List<Database.SaveResult>{ result });
            return result;
        }

        /**
         * @description Executes an `update` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to update
         * @return           The instance of `List<Database.SaveResult>`, generated by the platform when updating the records
         */
        public virtual List<Database.SaveResult> updateRecords(List<SObject> records) {
            List<Database.SaveResult> results = System.Database.update(records);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `update` DML operation on the provided list of `SObject` records
         * @param  records   The list of `SObject` records to update
         * @param  allOrNone Controls if all records must be updated (`true`), or if partial updates should be used (`false`)
         * @return           The instance of `List<Database.SaveResult>`, generated by the platform when updating the records
         */
        public virtual List<Database.SaveResult> updateRecords(List<SObject> records, Boolean allOrNone) {
            List<Database.SaveResult> results = System.Database.update(records, allOrNone);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `update` DML operation on the provided list of `SObject` records
         * @param  records    The list of `SObject` records to update
         * @param  dmlOptions Controls additional DML options, using the provided instance of `Database.DmlOptions`
         * @return            The instance of `List<Database.SaveResult>`, generated by the platform when updating the records
         */
        public virtual List<Database.SaveResult> updateRecords(List<SObject> records, Database.DmlOptions dmlOptions) {
            List<Database.SaveResult> results = System.Database.update(records, dmlOptions);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `upsert` DML operation on the provided list of `SObject` records
         * @param  record          The  `SObject` record to update
         * @param  externalIdField The `SObjectField` of the external ID field on the target `SObject` to use for upserting
         * @return                 The instance of `Database.UpsertResult`, generated by the platform when upserting the record
         */
        public virtual Database.UpsertResult upsertRecord(SObject record, Schema.SObjectField externalIdField) {
            Database.UpsertResult result = System.Database.upsert(record, externalIdField);
            new DataStoreErrorEmailSender().sendErrorEmail(record.getSObjectType(), new List<Database.UpsertResult>{result});
            return result;
        }

        /**
         * @description Executes an `upsert` DML operation on the provided list of `SObject` records
         * @param  records         The list of `SObject` records to upsert
         * @param  externalIdField The `SObjectField` of the external ID field on the target `SObject` to use for upserting
         * @return                 The instance of `List<Database.UpsertResult>`, generated by the platform when Upserting the records
         */
        public virtual List<Database.UpsertResult> upsertRecords(List<SObject> records, Schema.SObjectField externalIdField) {
            List<Database.UpsertResult> results = System.Database.upsert(records, externalIdField);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }

        /**
         * @description Executes an `upsert` DML operation on the provided list of `SObject` records
         * @param  records         The list of `SObject` records to upsert
         * @param  externalIdField The `SObjectField` of the external ID field on the target `SObject` to use for upserting
         * @param  allOrNone Controls if all records must be updated (`true`), or if partial updates should be used (`false`)
         * @return                 The instance of `List<Database.UpsertResult>`, generated by the platform when Upserting the records
         */
        public virtual List<Database.UpsertResult> upsertRecords(List<SObject> records, Schema.SObjectField externalIdField, Boolean allOrNone) {
            List<Database.UpsertResult> results = System.Database.upsert(records, externalIdField, allOrNone);
            new DataStoreErrorEmailSender().sendErrorEmail(records.getSObjectType(), results);
            return results;
        }
    }

    /**
     * @description Class used to centralize the handling of any platform event publishing operations
     */
    public virtual class EventBus {
        @SuppressWarnings('PMD.EmptyStatementBlock')
        protected EventBus() {
        }

        /**
         * @description Publishes a single platform event record, using `EventBus.publish(SObject record);
         * @param  platformEvent The platform event record to publish
         * @return               The instance of `Database.SaveResult`, generated by the platform when publishing the platform event record
         */
        public virtual Database.SaveResult publishRecord(SObject platformEvent) {
            Database.SaveResult result = System.EventBus.publish(platformEvent);
            new DataStoreErrorEmailSender().sendErrorEmail(platformEvent.getSObjectType(), new List<Database.SaveResult>{ result });
            return result;
        }

        /**
         * @description Publishes a list of platform event records, using `EventBus.publish(List<SObject> records);
         * @param  platformEvents The list of platform event records to publish
         * @return                The instance of `List<Database.SaveResult>`, generated by the platform when publishing the platform event records
         */
        public virtual List<Database.SaveResult> publishRecords(List<SObject> platformEvents) {
            List<Database.SaveResult> results = System.EventBus.publish(platformEvents);
            new DataStoreErrorEmailSender().sendErrorEmail(platformEvents.getSObjectType(), results);
            return results;
        }
    }

    /**
     * @description Class used to centralize the handling of enqueueing any queueable jobs
     */
    public virtual class JobQueue {
        @SuppressWarnings('PMD.EmptyStatementBlock')
        protected JobQueue() {
        }

        /**
         * @description Enqueues a queueable job to execute asynchronously, using `System.enqueueJob(Queueable queueableJob)`
         * @param  queueableJob An instance of a `Queueable` class that should be enqueued
         * @return              The `Id` of the queueable job
         */
        public virtual Id enqueueJob(Queueable queueableJob) {
            return System.enqueueJob(queueableJob);
        }
    }

    private class DataStoreErrorEmailSender {
        /**
         * @description Sends an error email notification to the org's list of Apex Exception Email recipients,
         *              configured under Setup --> Email --> Apex Exception Email
         * @param  sobjectType The SObjectType of records being saved.
         * @param  saveResults The list of Database.SaveResult instances to use in the email.
         *                     If no errors are found in the provided list, then no email will be sent.
         */
        public void sendErrorEmail(Schema.SObjectType sobjectType, List<Database.SaveResult> saveResults) {
            if (LoggerParameter.SEND_ERROR_EMAIL_NOTIFICATIONS == false || saveResults == null || saveResults.isEmpty()) {
                return;
            }

            List<String> errorMessages = this.getErrorMessages(saveResults);
            this.sendErrorEmail(sobjectType, errorMessages);
        }

        /**
         * @description Sends an error email notification to the org's list of Apex System.Exception Email recipients,
         *              configured under Setup --> Email --> Apex System.Exception Email
         * @param  sobjectType The SObjectType of records being saved.
         * @param  upsertResults The list of Database.UpsertResult instances to use in the email.
         *                     If no errors are found in the provided list, then no email will be sent.
         */
        public void sendErrorEmail(Schema.SObjectType sobjectType, List<Database.UpsertResult> upsertResults) {
            if (LoggerParameter.SEND_ERROR_EMAIL_NOTIFICATIONS == false || upsertResults == null || upsertResults.isEmpty()) {
                return;
            }

            List<String> errorMessages = this.getErrorMessages(upsertResults);
            this.sendErrorEmail(sobjectType, errorMessages);
        }

        private void sendErrorEmail(Schema.SObjectType sobjectType, List<String> errorMessages) {
            if (errorMessages.isEmpty()) {
                return;
            }

            if (CACHED_APEX_ERROR_RECIPIENTS.isEmpty()) {
                if (LoggerParameter.ENABLE_SYSTEM_MESSAGES) {
                    // One of a few limited places in the codebase (except tests) that should use System.debug()
                    // The rest of the codebase should use a method in Logger.cls
                    System.debug(System.LoggingLevel.WARN, 'Nebula Logger - no Apex email recipients configured, skipping sending email'); // NOPMD
                }
                return;
            }

            List<Messaging.SingleEmailMessage> messages = new List<Messaging.SingleEmailMessage>();
            for (Schema.ApexEmailNotification notification : CACHED_APEX_ERROR_RECIPIENTS) {
                Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();
                message.setSubject(this.buildSubject(errorMessages));
                message.setHtmlBody(this.buildHtmlBody(sobjectType, errorMessages));

                if (notification.UserId != null) {
                    message.setTargetObjectId(notification.UserId);
                    message.setSaveAsActivity(false);
                } else if (String.isNotBlank(notification.Email)) {
                    message.setToAddresses(new List<String>{ notification.Email });
                }
                messages.add(message);
            }

            EMAIL_SENDER.sendEmail(messages);
        }

        private List<String> getErrorMessages(List<Database.SaveResult> saveResults) {
            List<String> errorMessages = new List<String>();
            for (Database.SaveResult result : saveResults) {
                if (result.isSuccess() == false) {
                    for (Database.Error error : result.getErrors()) {
                        errorMessages.add(error.getMessage());
                    }
                }
            }
            return errorMessages;
        }

        private List<String> getErrorMessages(List<Database.UpsertResult> upsertResults) {
            List<String> errorMessages = new List<String>();
            for (Database.UpsertResult result : upsertResults) {
                if (result.isSuccess() == false) {
                    for (Database.Error error : result.getErrors()) {
                        errorMessages.add(error.getMessage());
                    }
                }
            }
            return errorMessages;
        }

        private String buildSubject(List<String> errorMessages) {
            String emailSubjectTemplate = 'Nebula Logger - Error Notification - {0} ({1})';
            List<Object> emailSubjectInputs = new List<Object>{
                System.UserInfo.getOrganizationName(),
                System.UserInfo.getOrganizationId()
            };
            return String.format(emailSubjectTemplate, emailSubjectInputs);
        }

        private String buildHtmlBody(Schema.SObjectType sobjectType, List<String> errorMessages) {
            final String emailBodyTemplate = 'Logger failed to save {0} {1} records for {2} (User ID: {3})<br /><br />Error Messages:<ul>{4}</ul>';
            final String formattedErrorMessages = '<li>' + String.join(errorMessages, '</li><li>') + '</li>';
            List<Object> emailBodyInputs = new List<Object>{
                errorMessages.size(),
                sobjectType,
                System.UserInfo.getUsername(),
                System.UserInfo.getUserId(),
                formattedErrorMessages
            };
            return String.format(emailBodyTemplate, emailBodyInputs);
        }
    }

    private static List<ApexEmailNotification> queryApexErrrorRecipients() {
        List<ApexEmailNotification> notifications = LogManagementDataSelector.getInstance().getCachedApexEmailNotifications();
        if (System.Test.isRunningTest()) {
            notifications.clear();
            notifications.addAll(MOCK_NOTIFICATIONS);
        }

        return notifications;
    }
}
